import * as echarts from '../../ec-canvas/echarts';

const app = getApp();

let textColor = '#505050'

const moment = require('moment');
const mydate = moment().format("YYYY-MM-DD")
const years = [] //当前时间的年份
years.push(moment().format("YYYY"))


const hours = moment().format("k") //当前时间的小时数
const minutes = moment().format("m") //当前时间的分钟数
const seconds = moment().format("s") //当前时间的秒数
// const months = [] //当前时间的月份

let months = [11, 10] //月份滚轮
// for ( let i = 0; i <= ( parseInt(moment().format("M")) - parseInt(moment('2021-10-25').format("M"))); i++ ) {
// 	months.push(moment().subtract(i, 'months').format("M月"))
// }
let singMonth = 11

let days = []
let octDay = new Array();//十月的日期列表
let novDay = new Array();//十一月的日期列表

for (let i = 31; i > 24; i--) {
	octDay.push(i)
}
// console.log(octDay)
let dayTo211101 = moment().diff('2021-11-01', 'days')
for (let i = dayTo211101 + 1; i > 0; i--) {
	days.push(i)
	novDay.push(i)
}
// console.log(days)




const testjson = {
	"body": {
		"2021-10-30 00:08:45": 64,
		"2021-10-30 00:18:47": 60,
		"2021-10-30 00:28:50": 62,
		"2021-10-30 00:38:50": 62,
		"2021-10-30 00:48:47": 58,
		"2021-10-30 00:58:46": 63,
		"2021-10-30 01:08:55": 65,
		"2021-10-30 01:18:52": 57,
		"2021-10-30 01:28:49": 63,
		"2021-10-30 01:38:55": 60,
		"2021-10-30 01:48:58": 59,
		"2021-10-30 01:58:50": 63,
		"2021-10-30 02:08:53": 67,
		"2021-10-30 02:18:50": 58,
		"2021-10-30 02:28:49": 67,
		"2021-10-30 02:38:47": 69,
		"2021-10-30 02:48:49": 63,
		"2021-10-30 02:58:52": 54,
		"2021-10-30 03:08:50": 74,
		"2021-10-30 03:18:54": 61,
		"2021-10-30 03:28:44": 67,
		"2021-10-30 03:38:44": 70,
		"2021-10-30 03:48:46": 57,
		"2021-10-30 03:58:50": 56,
		"2021-10-30 04:08:50": 70,
		"2021-10-30 04:18:50": 60,
		"2021-10-30 04:28:51": 66,
		"2021-10-30 04:38:55": 64,
		"2021-10-30 04:48:46": 57,
		"2021-10-30 04:58:47": 65,
		"2021-10-30 05:08:50": 56,
		"2021-10-30 05:18:45": 56,
		"2021-10-30 05:28:50": 55,
		"2021-10-30 05:38:51": 54,
		"2021-10-30 05:48:49": 53,
		"2021-10-30 05:58:53": 55,
		"2021-10-30 06:08:19": 58,
		"2021-10-30 06:18:55": 32,
		"2021-10-30 06:28:48": 24,
		"2021-10-30 06:38:48": 20,
		"2021-10-30 06:48:53": 27,
		"2021-10-30 06:58:25": 36,
		"2021-10-30 07:08:54": 44,
		"2021-10-30 07:18:55": 67,
		"2021-10-30 07:28:30": 95,
		"2021-10-30 07:38:31": 153,
		"2021-10-30 07:48:31": 235,
		"2021-10-30 07:58:04": 414,
		"2021-10-30 08:07:06": 653,
		"2021-10-30 08:17:07": 763,
		"2021-10-30 08:26:30": 904,
		"2021-10-30 08:36:36": 1030,
		"2021-10-30 08:46:35": 1174,
		"2021-10-30 08:56:36": 1269,
		"2021-10-30 09:06:09": 1373,
		"2021-10-30 09:16:17": 1464,
		"2021-10-30 09:26:05": 1539,
		"2021-10-30 09:36:05": 1646,
		"2021-10-30 09:46:09": 1681,
		"2021-10-30 09:56:19": 1662,
		"2021-10-30 10:06:10": 1811,
		"2021-10-30 10:16:06": 1897,
		"2021-10-30 10:26:10": 1924,
		"2021-10-30 10:36:13": 1933,
		"2021-10-30 10:46:15": 1918,
		"2021-10-30 10:56:14": 1951,
		"2021-10-30 11:06:10": 1911,
		"2021-10-30 11:16:03": 1883,
		"2021-10-30 11:26:04": 1803,
		"2021-10-30 11:36:02": 1646,
		"2021-10-30 11:46:08": 1298,
		"2021-10-30 11:56:07": 1060,
		"2021-10-30 12:06:11": 565,
		"2021-10-30 12:16:11": 397,
		"2021-10-30 12:26:12": 334,
		"2021-10-30 12:36:05": 349,
		"2021-10-30 12:46:07": 374,
		"2021-10-30 12:56:05": 411,
		"2021-10-30 13:06:00": 472,
		"2021-10-30 13:16:11": 502,
		"2021-10-30 13:26:04": 535,
		"2021-10-30 13:36:02": 569,
		"2021-10-30 13:46:02": 624,
		"2021-10-30 13:56:09": 764,
		"2021-10-30 14:06:05": 923,
		"2021-10-30 14:16:07": 1048,
		"2021-10-30 14:26:10": 1221,
		"2021-10-30 14:36:07": 1301,
		"2021-10-30 14:46:08": 1429,
		"2021-10-30 14:56:13": 1502,
		"2021-10-30 15:06:12": 1635,
		"2021-10-30 15:16:16": 1714,
		"2021-10-30 15:26:13": 1788,
		"2021-10-30 15:36:09": 1842,
		"2021-10-30 15:46:13": 1870,
		"2021-10-30 15:56:11": 1897,
		"2021-10-30 16:06:12": 1956,
		"2021-10-30 16:16:13": 1981,
		"2021-10-30 16:26:13": 1977,
		"2021-10-30 16:36:15": 1969,
		"2021-10-30 16:46:13": 1975,
		"2021-10-30 16:56:11": 1933,
		"2021-10-30 17:06:43": 1880,
		"2021-10-30 17:16:14": 1804,
		"2021-10-30 17:26:14": 1733,
		"2021-10-30 17:36:11": 1481,
		"2021-10-30 17:46:11": 1234,
		"2021-10-30 17:56:12": 870,
		"2021-10-30 18:06:06": 733,
		"2021-10-30 18:16:10": 777,
		"2021-10-30 18:26:19": 883,
		"2021-10-30 18:36:15": 1001,
		"2021-10-30 18:46:08": 1104,
		"2021-10-30 18:56:15": 1259,
		"2021-10-30 19:06:12": 1352,
		"2021-10-30 19:16:17": 1466,
		"2021-10-30 19:26:12": 1524,
		"2021-10-30 19:36:13": 1578,
		"2021-10-30 19:47:09": 1574,
		"2021-10-30 19:56:13": 1609,
		"2021-10-30 20:06:14": 1619,
		"2021-10-30 20:16:47": 1619,
		"2021-10-30 20:26:17": 1556,
		"2021-10-30 20:37:18": 1532,
		"2021-10-30 20:46:16": 1518,
		"2021-10-30 20:56:26": 1478,
		"2021-10-30 21:06:42": 1478,
		"2021-10-30 21:16:10": 1410,
		"2021-10-30 21:26:18": 1332,
		"2021-10-30 21:36:11": 1287,
		"2021-10-30 21:46:14": 1257,
		"2021-10-30 21:57:45": 1257,
		"2021-10-30 22:06:12": 1077,
		"2021-10-30 22:16:10": 981,
		"2021-10-30 22:26:23": 882,
		"2021-10-30 22:36:14": 743,
		"2021-10-30 22:48:12": 453,
		"2021-10-30 22:57:40": 211,
		"2021-10-30 23:07:31": 90,
		"2021-10-30 23:17:35": 63,
		"2021-10-30 23:27:35": 52,
		"2021-10-30 23:37:29": 66,
		"2021-10-30 23:47:31": 63,
		"2021-10-30 23:57:35": 74
	},
	"err_code": 0,
	"msg": "ok",
	"prompt": "操作成功"
}




// function initChart(canvas, width, height, dpr) {
// 	const chart = echarts.init(canvas, null, {
// 		width: width,
// 		height: height,
// 		renderer: 'canvas',
// 		devicePixelRatio: dpr // new
// 	});
// 	canvas.setChart(chart);


// 	console.log("setOption done")
// 	return chart;
// }
let buildOccupyRateList = new Array();
let buildPeopleSumList = new Array();
wx.request({
	url: 'https://ezone.catop.top/api/statisticsAPI/getEachBuildingOverallRTData',
	success: (res) => {
	//   console.log(res)
		buildOccupyRateList.push(
		parseInt(res.data.body[0].buildOccupyRate * 100),
		parseInt(res.data.body[1].buildOccupyRate * 100),
		parseInt(res.data.body[2].buildOccupyRate * 100)
		)
		buildPeopleSumList.push(
			parseInt(res.data.body[0].buildPeopleSum),
			parseInt(res.data.body[1].buildPeopleSum),
			parseInt(res.data.body[2].buildPeopleSum)
		)
		// console.log(buildOccupyRateList)
	}
})

function getBarOption() {
		

	var tempoption = {
		textStyle: {
			color: textColor
		},
		title: {
			// text: 'legend的红色区域不应被裁剪',
			text: "各教学楼实时使用率",
			textStyle: {
				color: textColor
			},
			left: 'center'
		},
		tooltip: {
			show: true,
			trigger: 'axis',
			formatter: '{c}%'
		},
		legend: {
			orient: 'vertical',
			left: 'center',
			textStyle: {
				color: textColor, // 文字的颜色。
			}
		  },
		xAxis: {
		  type: 'category',
		  data: ['S1','J1','J14'],
		  axisTick: {
			  alignWithLabel: true
			}
		},
		yAxis: {
		  type: 'value',
		  axisLabel: {  // 显示百分比
			show: true,
			interval: 'auto',
			formatter: '{value}%'
		},
		show: true
		},
		series: [
		  {
			data: [
			  {
				value: buildOccupyRateList[0],
				// value: 70,
				itemStyle: {
				  color: '#F4A460'
				}
			  },{
				  value: buildOccupyRateList[1],
				// value: 30,
				  itemStyle: {
					  color: '#FF7F50'
				  }
			  },{
				value: buildOccupyRateList[2],
				// value: 50,
				itemStyle: {
					color: '#D2B48C'
				}
			}
			],
			type: 'bar'
		  }
		]
	  }
	  return tempoption;
}

function getPieOption() {



	var tempoption = {
		textStyle: {
			color: textColor, // 文字的颜色。
		},
		tooltip: {
		  trigger: 'item'
		},
		legend: {
			orient: 'vertical',
			left: 'left',
			textStyle: {
				color: textColor, // 文字的颜色。
			}
		  },
	  
		title: {
		  text: '各教学楼实时人数',
		  textStyle: {
			color: textColor, // 文字的颜色。
		},
		  left: 'center'
		},
	  
		series: [
		  {
			
			// name: '教学楼人数',
			type: 'pie',
			radius: '50%',
			itemStyle: {
			  borderRadius: 7,
			  borderColor: '#fff',
			  borderWidth: 2
			},
			label: {
				color: textColor
			},
			emphasis: {
			  itemStyle: {
				shadowBlur: 10,
				shadowOffsetX: 0,
				shadowColor: 'rgba(0, 0, 0, 0.5)'
			  }
			},
	  
			data: [
			  { value: buildPeopleSumList[0], name: 'S1', itemStyle: {color:"#F4A460"} },
			  { value: buildPeopleSumList[1], name: 'J1', itemStyle: {color:"#FF7F50"} },
			  { value: buildPeopleSumList[2], name: 'J14', itemStyle: {color:"#D2B48C"} }
			]
		  }
		]
	  }
	  return tempoption;
}

Page({
	data: {
		theme: 'light',
		years,
		months,
		days,
		value: [0, 0, 0],
		xarray: {},
		yarray: {},
		lineChartJSON: {},
		ec: {
			// 将 lazyLoad 设为 true 后，需要手动初始化图表
			lazyLoad: true
		},
		ecBar: {
			onInit: function (canvas, width, height, dpr) {
			  const barChart = echarts.init(canvas, null, {
				width: width,
				height: height,
				devicePixelRatio: dpr // new
			  });
			  canvas.setChart(barChart);
			  barChart.setOption(getBarOption());
	  
			  this.barChart = barChart
			  return barChart;
			}
		  },
		  ecPie: {
			onInit: function (canvas, width, height, dpr) {
			  const pieChart = echarts.init(canvas, null, {
				width: width,
				height: height,
				devicePixelRatio: dpr // new
			  });
			  canvas.setChart(pieChart);
			  pieChart.setOption(getPieOption());
	  
			  return pieChart;
			}
		  },
		totalNumberJSON: {},
		testjson: {
			"body": {
				"2021-10-26 00:04:23": 20,
				"2021-10-26 00:04:24": 54,
				"2021-10-26 00:14:24": 68,
				"2021-10-26 00:24:21": 59,
				"2021-10-26 00:24:22": 20,
				"2021-10-26 00:34:17": 45,
				"2021-10-26 00:34:18": 24,
				"2021-10-26 00:44:21": 81,
				"2021-10-26 00:54:24": 34,
				"2021-10-26 00:54:25": 36,
				"2021-10-26 01:04:26": 81,
				"2021-10-26 01:14:22": 61,
				"2021-10-26 01:14:23": 14,
				"2021-10-26 01:24:25": 72,
				"2021-10-26 01:34:29": 39,
				"2021-10-26 01:34:30": 34,
				"2021-10-26 01:44:26": 70,
				"2021-10-26 01:54:23": 73,
				"2021-10-26 02:04:19": 71,
				"2021-10-26 02:14:21": 70,
				"2021-10-26 02:24:21": 16,
				"2021-10-26 02:24:22": 56,
				"2021-10-26 02:34:23": 79,
				"2021-10-26 02:44:20": 82,
				"2021-10-26 02:54:21": 74,
				"2021-10-26 02:54:22": 2,
				"2021-10-26 03:04:20": 70,
				"2021-10-26 03:14:20": 13,
				"2021-10-26 03:14:21": 63,
				"2021-10-26 03:24:21": 14,
				"2021-10-26 03:24:22": 58,
				"2021-10-26 03:34:20": 82,
				"2021-10-26 03:44:21": 76,
				"2021-10-26 03:54:27": 74,
				"2021-10-26 04:04:22": 13,
				"2021-10-26 04:04:23": 59,
				"2021-10-26 04:14:24": 70,
				"2021-10-26 04:24:23": 72,
				"2021-10-26 04:34:20": 83,
				"2021-10-26 04:44:25": 15,
				"2021-10-26 04:44:26": 58,
				"2021-10-26 04:54:27": 61,
				"2021-10-26 04:54:28": 11,
				"2021-10-26 05:04:22": 73,
				"2021-10-26 05:04:23": 2,
				"2021-10-26 05:14:23": 77,
				"2021-10-26 05:24:23": 27,
				"2021-10-26 05:24:24": 43,
				"2021-10-26 05:34:24": 74,
				"2021-10-26 05:44:21": 77,
				"2021-10-26 05:54:18": 75,
				"2021-10-26 06:04:23": 50,
				"2021-10-26 06:04:24": 20,
				"2021-10-26 06:14:24": 1,
				"2021-10-26 06:14:25": 57,
				"2021-10-26 06:23:57": 44,
				"2021-10-26 06:34:02": 45,
				"2021-10-26 06:44:00": 55,
				"2021-10-26 06:53:29": 58,
				"2021-10-26 07:02:59": 84,
				"2021-10-26 07:10:35": 91,
				"2021-10-26 07:19:42": 174,
				"2021-10-26 07:28:48": 150,
				"2021-10-26 07:28:49": 188,
				"2021-10-26 07:37:50": 340,
				"2021-10-26 07:37:51": 253,
				"2021-10-26 07:46:29": 1138,
				"2021-10-26 07:55:34": 290,
				"2021-10-26 07:55:35": 2220,
				"2021-10-26 08:05:07": 1670,
				"2021-10-26 08:05:08": 2445,
				"2021-10-26 08:15:01": 923,
				"2021-10-26 08:15:02": 3382,
				"2021-10-26 08:25:01": 4369,
				"2021-10-26 08:35:07": 635,
				"2021-10-26 08:35:08": 3801,
				"2021-10-26 08:45:07": 4425,
				"2021-10-26 08:55:02": 1821,
				"2021-10-26 08:55:03": 2325,
				"2021-10-26 09:05:01": 4417,
				"2021-10-26 09:15:04": 4599,
				"2021-10-26 09:24:59": 3361,
				"2021-10-26 09:25:00": 1170,
				"2021-10-26 09:34:57": 279,
				"2021-10-26 09:34:58": 4286,
				"2021-10-26 09:45:04": 4578,
				"2021-10-26 09:55:29": 2461,
				"2021-10-26 09:55:30": 453,
				"2021-10-26 10:05:02": 2771,
				"2021-10-26 10:05:03": 730,
				"2021-10-26 10:15:03": 4343,
				"2021-10-26 10:25:02": 4404,
				"2021-10-26 10:25:03": 48,
				"2021-10-26 10:35:02": 4392,
				"2021-10-26 10:44:58": 4407,
				"2021-10-26 10:55:05": 4386,
				"2021-10-26 11:05:04": 4243,
				"2021-10-26 11:15:04": 4302,
				"2021-10-26 11:25:03": 4295,
				"2021-10-26 11:35:01": 4189,
				"2021-10-26 11:45:08": 2555,
				"2021-10-26 11:45:09": 134,
				"2021-10-26 11:55:01": 2347,
				"2021-10-26 12:05:06": 1416,
				"2021-10-26 12:15:03": 293,
				"2021-10-26 12:25:04": 36,
				"2021-10-26 12:25:05": 224,
				"2021-10-26 12:35:05": 41,
				"2021-10-26 12:35:06": 206,
				"2021-10-26 12:45:01": 21,
				"2021-10-26 12:45:02": 247,
				"2021-10-26 12:54:58": 303,
				"2021-10-26 13:05:01": 334,
				"2021-10-26 13:14:57": 368,
				"2021-10-26 13:14:58": 15,
				"2021-10-26 13:25:01": 416,
				"2021-10-26 13:35:26": 433,
				"2021-10-26 13:45:26": 451,
				"2021-10-26 13:54:59": 82,
				"2021-10-26 13:55:00": 406,
				"2021-10-26 14:05:05": 96,
				"2021-10-26 14:05:06": 461,
				"2021-10-26 14:15:07": 114,
				"2021-10-26 14:15:08": 562,
				"2021-10-26 14:25:04": 875,
				"2021-10-26 14:35:00": 1000,
				"2021-10-26 14:45:00": 1119,
				"2021-10-26 14:55:05": 50,
				"2021-10-26 14:55:06": 1152,
				"2021-10-26 15:05:05": 1323,
				"2021-10-26 15:15:03": 1385,
				"2021-10-26 15:24:58": 1200,
				"2021-10-26 15:24:59": 238,
				"2021-10-26 15:34:59": 1502,
				"2021-10-26 15:44:56": 1178,
				"2021-10-26 15:44:57": 370,
				"2021-10-26 15:55:06": 790,
				"2021-10-26 15:55:07": 807,
				"2021-10-26 16:05:00": 1620,
				"2021-10-26 16:05:01": 109,
				"2021-10-26 16:15:00": 846,
				"2021-10-26 16:15:01": 933,
				"2021-10-26 16:24:57": 1808,
				"2021-10-26 16:35:03": 1850,
				"2021-10-26 16:45:00": 1858,
				"2021-10-26 16:55:02": 1825,
				"2021-10-26 17:05:02": 1770,
				"2021-10-26 17:14:59": 1746,
				"2021-10-26 17:25:00": 1525,
				"2021-10-26 17:35:02": 976,
				"2021-10-26 17:35:03": 226,
				"2021-10-26 22:05:05": 1341,
				"2021-10-26 22:15:34": 1153,
				"2021-10-26 22:25:28": 999,
				"2021-10-26 22:35:47": 36,
				"2021-10-26 22:35:48": 811,
				"2021-10-26 22:45:31": 468,
				"2021-10-26 22:56:25": 199,
				"2021-10-26 23:07:49": 14,
				"2021-10-26 23:07:50": 58,
				"2021-10-26 23:17:49": 45,
				"2021-10-26 23:27:49": 42,
				"2021-10-26 23:37:46": 11,
				"2021-10-26 23:37:47": 45,
				"2021-10-26 23:47:47": 36,
				"2021-10-26 23:47:48": 16,
				"2021-10-26 23:57:48": 16,
				"2021-10-26 23:57:49": 29
			},
			"err_code": 0,
			"msg": "ok",
			"prompt": "操作成功"
		},
		testjson2: {
			"body": {
				"2021-10-29 00:05:03": 66,
				"2021-10-29 00:15:02": 63,
				"2021-10-29 00:24:55": 60,
				"2021-10-29 00:35:00": 53,
				"2021-10-29 00:44:56": 56,
				"2021-10-29 00:54:56": 71,
				"2021-10-29 01:05:00": 67,
				"2021-10-29 01:15:01": 66,
				"2021-10-29 01:25:00": 65,
				"2021-10-29 01:34:57": 69,
				"2021-10-29 01:44:56": 68,
				"2021-10-29 01:55:00": 81,
				"2021-10-29 02:05:00": 67,
				"2021-10-29 02:14:59": 57,
				"2021-10-29 02:24:59": 60,
				"2021-10-29 02:34:55": 66,
				"2021-10-29 02:44:59": 64,
				"2021-10-29 02:54:56": 70,
				"2021-10-29 03:04:57": 66,
				"2021-10-29 03:15:00": 68,
				"2021-10-29 03:24:52": 70,
				"2021-10-29 03:34:57": 63,
				"2021-10-29 03:44:54": 60,
				"2021-10-29 03:54:52": 80,
				"2021-10-29 04:04:57": 56,
				"2021-10-29 04:14:54": 58,
				"2021-10-29 04:25:01": 65,
				"2021-10-29 04:35:02": 69,
				"2021-10-29 04:44:59": 74,
				"2021-10-29 04:54:56": 70,
				"2021-10-29 05:05:04": 70,
				"2021-10-29 05:15:04": 58,
				"2021-10-29 05:25:00": 65,
				"2021-10-29 05:34:59": 66,
				"2021-10-29 05:45:00": 67,
				"2021-10-29 05:54:58": 52,
				"2021-10-29 06:05:01": 59,
				"2021-10-29 06:15:01": 34,
				"2021-10-29 06:24:57": 36,
				"2021-10-29 06:35:00": 33,
				"2021-10-29 06:45:04": 45,
				"2021-10-29 06:54:36": 69,
				"2021-10-29 07:02:40": 116,
				"2021-10-29 07:12:44": 209,
				"2021-10-29 07:22:43": 374,
				"2021-10-29 07:31:11": 523,
				"2021-10-29 07:39:24": 854,
				"2021-10-29 07:48:58": 1547,
				"2021-10-29 07:57:06": 2982,
				"2021-10-29 08:06:44": 4589,
				"2021-10-29 08:16:38": 4800,
				"2021-10-29 08:26:35": 4882,
				"2021-10-29 08:36:38": 4934,
				"2021-10-29 08:46:40": 4994,
				"2021-10-29 08:56:32": 4560,
				"2021-10-29 09:06:37": 5116,
				"2021-10-29 09:16:35": 5173,
				"2021-10-29 09:26:34": 5166,
				"2021-10-29 09:36:36": 5235,
				"2021-10-29 09:46:39": 5201,
				"2021-10-29 09:57:30": 3256,
				"2021-10-29 10:06:38": 4481,
				"2021-10-29 10:16:34": 5222,
				"2021-10-29 10:26:35": 5298,
				"2021-10-29 10:36:38": 5275,
				"2021-10-29 10:46:41": 5276,
				"2021-10-29 10:56:36": 5289,
				"2021-10-29 11:06:41": 4923,
				"2021-10-29 11:16:43": 5120,
				"2021-10-29 11:26:37": 5074,
				"2021-10-29 11:36:37": 4935,
				"2021-10-29 11:46:37": 3701,
				"2021-10-29 11:56:40": 3448,
				"2021-10-29 12:06:38": 1235,
				"2021-10-29 12:16:33": 350,
				"2021-10-29 12:26:35": 299,
				"2021-10-29 12:36:36": 281,
				"2021-10-29 12:46:34": 303,
				"2021-10-29 12:56:36": 340,
				"2021-10-29 13:06:36": 389,
				"2021-10-29 13:16:36": 428,
				"2021-10-29 13:26:34": 452,
				"2021-10-29 13:36:28": 495,
				"2021-10-29 13:46:37": 614,
				"2021-10-29 13:56:33": 1448,
				"2021-10-29 14:06:04": 3127,
				"2021-10-29 14:16:04": 3322,
				"2021-10-29 14:26:07": 3459,
				"2021-10-29 14:36:04": 3554,
				"2021-10-29 14:46:08": 3556,
				"2021-10-29 14:56:13": 3405,
				"2021-10-29 15:06:07": 3635,
				"2021-10-29 15:16:09": 3710,
				"2021-10-29 15:26:13": 3739,
				"2021-10-29 15:36:05": 3732,
				"2021-10-29 15:46:22": 3764,
				"2021-10-29 15:56:10": 2490,
				"2021-10-29 16:06:10": 2359,
				"2021-10-29 16:16:10": 2494,
				"2021-10-29 16:26:06": 2545,
				"2021-10-29 16:36:07": 2551,
				"2021-10-29 16:46:09": 2515,
				"2021-10-29 16:56:07": 2447,
				"2021-10-29 17:06:06": 2406,
				"2021-10-29 17:16:14": 2227,
				"2021-10-29 17:26:14": 2142,
				"2021-10-29 17:36:08": 1873,
				"2021-10-29 17:46:15": 1394,
				"2021-10-29 17:56:07": 850,
				"2021-10-29 18:06:08": 726,
				"2021-10-29 18:16:04": 816,
				"2021-10-29 18:26:04": 1009,
				"2021-10-29 18:36:05": 1213,
				"2021-10-29 18:46:09": 1455,
				"2021-10-29 18:56:11": 1905,
				"2021-10-29 19:06:10": 2489,
				"2021-10-29 19:16:07": 2609,
				"2021-10-29 19:26:07": 2645,
				"2021-10-29 19:36:08": 2730,
				"2021-10-29 19:46:10": 2749,
				"2021-10-29 19:56:15": 2682,
				"2021-10-29 20:06:03": 2731,
				"2021-10-29 20:16:12": 2753,
				"2021-10-29 20:26:04": 2742,
				"2021-10-29 20:36:09": 2799,
				"2021-10-29 20:46:06": 2725,
				"2021-10-29 20:56:08": 1976,
				"2021-10-29 21:06:12": 1610,
				"2021-10-29 21:16:09": 1579,
				"2021-10-29 21:26:08": 1501,
				"2021-10-29 21:36:04": 1462,
				"2021-10-29 21:46:05": 1387,
				"2021-10-29 21:56:09": 1308,
				"2021-10-29 22:06:02": 1209,
				"2021-10-29 22:16:07": 1111,
				"2021-10-29 22:36:48": 825,
				"2021-10-29 22:47:39": 441,
				"2021-10-29 22:57:57": 185,
				"2021-10-29 23:08:52": 92,
				"2021-10-29 23:18:47": 71,
				"2021-10-29 23:28:50": 61,
				"2021-10-29 23:38:58": 58,
				"2021-10-29 23:48:44": 56,
				"2021-10-29 23:58:46": 58
			},
			"err_code": 0,
			"msg": "ok",
			"prompt": "操作成功"
		}
	},
	init: function (option) {
		this.ecLineChart.init((canvas, width, height, dpr) => {
			// 获取组件的 canvas、width、height 后的回调函数
			// 在这里初始化图表
			const chart = echarts.init(canvas, null, {
				width: width,
				height: height,
				devicePixelRatio: dpr // new
			});
			

			// 将图表实例绑定到 this 上，可以在其他成员函数（如 dispose）中访问
			this.chart = chart;
			this.setOption(option);

			this.setData({
				isLoaded: true,
				isDisposed: false
			});

			// 注意这里一定要返回 chart 实例，否则会影响事件处理等
			return chart;
		});
	},
	// initBarChart: function (option) {
		
	// 	this.ecLineChart.init((canvas, width, height, dpr) => {
	// 		// 获取组件的 canvas、width、height 后的回调函数
	// 		// 在这里初始化图表
	// 		const chart = echarts.init(canvas, null, {
	// 			width: width,
	// 			height: height,
	// 			devicePixelRatio: dpr // new
	// 		});
			

	// 		// 将图表实例绑定到 this 上，可以在其他成员函数（如 dispose）中访问
	// 		this.BarChart = chart;
	// 		this.setOption(option);

	// 		this.setData({
	// 			isLoaded: true,
	// 			isDisposed: false
	// 		});

	// 		// 注意这里一定要返回 chart 实例，否则会影响事件处理等
	// 		return chart;
	// 	});
	// },
	setOption: function (option) {
		
		this.chart.setOption(option,{
			notMerge: false,
			lazyUpdate: false,
			silent: false
		});
	},
	// initbar: function (option) {

	// },
	onLoad() {
		var self = this
		// this.setData({
		// 	theme: wx.getSystemInfoSync().theme || 'light'
		// })
		// if (wx.getSystemInfoSync().theme == "dark") {
		// 	// textColor = '#CD6155'
		// 	textColor = '#99A3A4'
		// }
		
		// if (wx.onThemeChange) {
		// 	console.log("if (wx.onThemeChange) {")
		// 	wx.onThemeChange(({
		// 		theme
		// 	}) => {
		// 		this.setData({
		// 			theme
		// 		})
		// 	})
		// }


		let xarray = []
		let yarray = []

		this.ecLineChart = this.selectComponent('#Line-chart');
		this.ecBarChart = this.selectComponent('#Bar-chart');
		this.ecBarChart = this.selectComponent('#Pie-chart');

		


		wx.request({
			url: 'https://ezone.catop.top/api/statisticsAPI/getDailySumData',
			data: {
				"date": mydate
			},
			success: (res) => {
				
				// console.log(mydate)
				// console.log(res.data)
				self.setData({
					lineChartJSON: res.data
				})
				//从json取出x和y
				for (var key in res.data.body) {
					xarray.push(key.substring(key.indexOf(" ") + 1, key.lastIndexOf(":")))
					yarray.push(res.data.body[key])
				}

				{ //处理json，截取时间段在06:3x~23:0y内的数据
					let signI = 0
					let signJ = -1
					for (var i in xarray) {
						if (xarray[i].search("06:2") == 0) { //防止06:3x的数据丢失
							signI = i
						} else if (xarray[i].search("06:3") == 0) {
							signI = i
						} else if (xarray[i].search("23:0") == 0) { //防止23:1x的数据丢失
							signJ = i
						} else if (xarray[i].search("23:1") == 0) {
							signJ = i
						}
					}
					xarray = xarray.slice(signI, signJ)
					yarray = yarray.slice(signI, signJ)
				}
				var option = {
					textStyle: {
						color: textColor, // 文字的颜色。
					},
					title: {
						// text: 'legend的红色区域不应被裁剪',
						text: mydate + "总人数趋势",
						left: 'center',
						textStyle: {
							color: textColor, // 文字的颜色。
						}
					},
					color: '#FF9900',
					legend: {
						data: ['总人数'],
						top: 25,
						left: 'center',
						// backgroundColor: 'red',
						z: 100,
						textStyle: {
							color: textColor, // 文字的颜色。
						}
					},
					grid: {
						containLabel: true
					},
					tooltip: {
						show: true,

						trigger: 'axis'
					},
					xAxis: {
						type: 'category',
						data: xarray
					},
					yAxis: {
						type: 'value'
					},
					series: [{
						name: '总人数',
						data: yarray,
						type: 'line',
						lineStyle: {
							normal: {
								color: '#FF9900',
							},
						},
						showSymbol: false,
						// symbol: 'none',
						smooth: true
					}]
				};
				self.init(option)


				


			}

		})

		// let buildOccupyRate = []
		// 		wx.request({
		// 		  url: 'https://ezone.catop.top/api/statisticsAPI/getEachBuildingOverallRTData',
		// 		  success: (res) => {
		// 			  console.log(res.data)
		// 			  buildOccupyRate.push(
		// 				res.data.body[0].buildOccupyRate,
		// 				res.data.body[1].buildOccupyRate,
		// 				res.data.body[2].buildOccupyRate
		// 				)
		// 				console.log(buildOccupyRate)
		// 		  }
		// 		})

		

	},
	onReady() {
		// let xarray = []
		// let yarray = []


		// //从json取出x和y
		// for (var key in testjson.body) {
		// 	xarray.push(key.substring(key.indexOf(" ") + 1, key.lastIndexOf(":")))
		// 	yarray.push(testjson.body[key])
		// }

		// { //处理json，截取时间段在06:3x~23:0y内的数据
		// 	let signI = 0
		// 	let signJ = -1
		// 	for (var i in xarray) {
		// 		if (xarray[i].search("06:2") == 0) { //防止06:3x的数据丢失
		// 			signI = i
		// 		} else if (xarray[i].search("06:3") == 0) {
		// 			signI = i
		// 		} else if (xarray[i].search("23:0") == 0) { //防止23:1x的数据丢失
		// 			signJ = i
		// 		} else if (xarray[i].search("23:1") == 0) {
		// 			signJ = i
		// 		}
		// 	}
		// 	xarray = xarray.slice(signI, signJ)
		// 	yarray = yarray.slice(signI, signJ)
		// }

	},
	bindChange(event) {
		const val = event.detail.value
		var self = this

		if (singMonth != self.data.months[val[1]]) {
			if (self.data.months[val[1]] == 10) {
				self.setData({
					days: octDay
				})
				singMonth = self.data.months[val[1]]
			} else if (self.data.months[val[1]] == 11) {
				self.setData({
					days: novDay
				})
				singMonth = self.data.months[val[1]]
			}
		}

		let monthstr = '' + this.data.months[val[1]]
		if(this.data.months[val[1]] >= 1 && this.data.months[val[1]] <= 9) {
			monthstr = '0' + this.data.months[val[1]]
		}
		let daystr = '' + this.data.days[val[2]]
		if (this.data.days[val[2]] >= 1 && this.data.days[val[2]] <= 9) {
			daystr = '0' + this.data.days[val[2]]
		}
		var today = moment(this.data.years[val[0]] + "-" + monthstr + "-" + daystr).format("YYYY-MM-DD")
		// console.log(this.data.years[val[0]] + "-" + monthstr + "-" + daystr)
		wx.request({
			url: 'https://ezone.catop.top/api/statisticsAPI/getDailySumData',
			data: {
				"date": today
			},
			success: (res) => {
				self.setData({
					lineChartJSON: res.data
				})

				let xarray = []
				let yarray = []
				//从json取出x和y
				for (var key in res.data.body) {
					xarray.push(key.substring(key.indexOf(" ") + 1, key.lastIndexOf(":")))
					yarray.push(res.data.body[key])
				}

				{ //处理json，截取时间段在06:3x~23:0y内的数据
					let signI = 0
					let signJ = -1
					for (var i in xarray) {
						if (xarray[i].search("06:2") == 0) { //防止06:3x的数据丢失
							signI = i
						} else if (xarray[i].search("06:3") == 0) {
							signI = i
						} else if (xarray[i].search("23:0") == 0) { //防止23:1x的数据丢失
							signJ = i
						} else if (xarray[i].search("23:1") == 0) {
							signJ = i
						}
					}
					xarray = xarray.slice(signI, signJ)
					yarray = yarray.slice(signI, signJ)
				}
				var option = {
					title: {
						// text: 'legend的红色区域不应被裁剪',
						text: today + "总人数趋势",
						left: 'center'
					},
					legend: {
						data: ['总人数'],
						top: 25,
						left: 'center',
						// backgroundColor: 'red',
						z: 100,
						textStyle: {
							color: "#727070", // 文字的颜色。
						}
					},
					grid: {
						containLabel: true
					},
					tooltip: {
						show: true,
						trigger: 'axis'
					},
					xAxis: {
						type: 'category',
						data: xarray
					},
					yAxis: {
						type: 'value'
					},
					series: [{
						name: '总人数',
						data: yarray,
						type: 'line',
						smooth: true
					}]
				};
				//   self.init(xarray, yarray, mydate)
				self.chart.setOption(option)
			}

		})
		self.setData({
			testtext: this.data.years[val[0]] + "年" + this.data.months[val[1]] + "月" + this.data.days[val[2]] + "日",
			value: val
		})

	} //picker-end
});